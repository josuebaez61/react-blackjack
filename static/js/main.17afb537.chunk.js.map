{"version":3,"sources":["components/PlayerCards.jsx","components/GameTitle.jsx","pages/home/HomeScreen.jsx","types/types.jsx","actions/gameActions.jsx","components/Deck.jsx","components/GameButtons.jsx","components/Scoreboard.jsx","components/Aside.jsx","components/PlayersTitles.jsx","pages/game/GameScreen.jsx","router/AppRouter.jsx","helpers/getResults.js","helpers/getCardValue.js","helpers/getRounds.js","classes/Card.js","reducers/gameReducer.jsx","store.js","App.jsx","index.js"],"names":["PlayerCards","cardsProp","useSelector","state","game","player_cards","ia_cards","turn","className","eval","length","map","card","src","name","alt","GameTitle","icon","faReact","HomeScreen","to","types","pickCard","type","changeTurn","currentTurn","execIATurn","Deck","deck","playerwins","dispatch","useDispatch","onClick","style","color","GameButtons","handleMouseOver","e","target","disabled","classList","add","remove","onMouseOver","Swal","fire","title","text","showConfirmButton","confirmButtonText","showCancelButton","cancelButtonText","then","isConfirmed","Scoreboard","rounds","player_rounds","ia_rounds","Aside","score","player_wins","useEffect","PlayersTitles","points","player_points","ia_points","fontSize","faQuestionCircle","GameScreen","height","AppRouter","exact","path","component","getResults","playerPoints","iaPoints","deckcounter","showEndGameAlert","getCardValue","cardName","cardValue","Number","substring","getRounds","results","Card","value","this","createDeck","letters","suit","letter","push","i","initialState","composeEnhancers","window","__REDUX_DEVTOOLS_EXTENSION_COMPOSE__","compose","reducers","combineReducers","action","cloneState","player_points_state","ia_points_state","String","pop","iaTurnResults","store","createStore","applyMiddleware","thunk","App","ReactDOM","render","document","getElementById"],"mappings":"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","file":"static/js/main.17afb537.chunk.js","sourcesContent":["import React from 'react'\r\nimport { useEffect } from 'react';\r\nimport { useState } from 'react';\r\nimport { useDispatch, useSelector } from 'react-redux'\r\n\r\nconst PlayerCards = ({cardsProp}) => {\r\n\r\n    const { game: { player_cards, ia_cards, turn } } = useSelector(state => state);\r\n\r\n    return (\r\n        <div className={ eval(cardsProp).length > 10 ? \"in-game-cards in-game-cards--stacked\" : \"in-game-cards\" }>\r\n            {\r\n                eval(cardsProp).length > 0 && \r\n                eval(cardsProp).map( card => {\r\n                    // Si la carta invocada es AD, la imagen es bloqueada por los AD block debido al nombre \"AD.png\", por esta razon se cambio el nombre original por\r\n                    // \"A_D.png\", asi que controlamos esta excepcion mediante ((card.name === 'AD') ? 'A_D' : card.name)\r\n                    return (<img key={card.name} src={ './assets/images/' + ((card.name === 'AD') ? 'A_D' : card.name)  + '.png' } alt={card.name} />)\r\n                })\r\n            }\r\n        </div>\r\n    )\r\n}\r\n\r\nexport default PlayerCards\r\n","import React from 'react';\r\nimport { FontAwesomeIcon } from \"@fortawesome/react-fontawesome\";\r\nimport { faReact } from '@fortawesome/free-brands-svg-icons';\r\n\r\nconst GameTitle = () => {\r\n    return (\r\n        <h1 className=\"game-title\">BlackJack<FontAwesomeIcon className=\"blue-react\" icon={ faReact } /></h1>\r\n    )\r\n}\r\n\r\nexport default GameTitle;\r\n","import React from \"react\";\r\nimport { Link } from \"react-router-dom\";\r\nimport GameTitle from \"../../components/GameTitle\";\r\nimport Rules from \"../../components/Rules\";\r\n\r\nconst HomeScreen = () => {\r\n  return (\r\n    <div className=\"main__box main__box--home\">\r\n      <div>\r\n        <GameTitle/>\r\n        <header>\r\n          <nav>\r\n            <ul className=\"menu\">\r\n              <li>\r\n                <Link to=\"/ingame\">Nueva Partida</Link>\r\n              </li>\r\n              {/* <li>\r\n                <Rules/>\r\n              </li> */}\r\n            </ul>\r\n          </nav>\r\n        </header>\r\n      </div>\r\n    </div>\r\n  );\r\n};\r\n\r\nexport default HomeScreen;\r\n","export const types = {\r\n    initGame: '[game] Init game',\r\n    pickCard: '[game] Pick card',\r\n    changeTurn: '[game] Change turn',\r\n    execIATurn: '[game] Execute IA turn',\r\n    endRound: '[game] End round',\r\n    reset: '[game] Reset to initial state',\r\n}","import { types } from '../types/types';\r\n\r\nexport const initGame = () => ({ type: types.initGame });\r\nexport const pickCard = ( turn ) => ({ type: types.pickCard, turn });\r\nexport const changeTurn = ( currentTurn ) => ({ type: types.changeTurn, currentTurn });\r\nexport const execIATurn = () => ({ type: types.execIATurn });\r\nexport const endRound = () => ({ type: types.endRound });\r\nexport const reset = () => ({ type: types.reset });","import React, { useEffect } from 'react';\r\nimport { useDispatch } from 'react-redux';\r\nimport { pickCard } from '../actions/gameActions';\r\n\r\nconst Deck = ({ deck, playerwins }) => {\r\n\r\n    const dispatch = useDispatch();\r\n    \r\n    const handleClick = () => {\r\n        if (playerwins === null) {\r\n            dispatch( pickCard('player') );\r\n        }\r\n    }\r\n\r\n    return (\r\n        <div className=\"game-aside__deck\"> \r\n            <img onClick={ handleClick } className={ ( (playerwins !== null) || deck.length <= 0 ) ? 'not-allowed img-disabled' : 'pointer' } src={ './assets/images/grey_back.png' } alt=\"deck\"/>\r\n            <span className=\"game-aside__cards-counter\" style={ deck.length <= 0 ? { color: 'red'} : { color: 'white'} } >{ deck.length }</span>\r\n        </div>\r\n    )\r\n}\r\n\r\nexport default Deck\r\n","import React, { useEffect, useState } from \"react\";\r\nimport { createSelectorHook, shallowEqual, useDispatch, useSelector } from \"react-redux\";\r\nimport Swal from \"sweetalert2\";\r\nimport { changeTurn, endRound, execIATurn, initGame, pickCard, reset, startPickCard } from \"../actions/gameActions\";\r\n\r\nconst GameButtons = ({ deck, playerwins }) => {\r\n\r\n  const dispatch = useDispatch();\r\n\r\n  const handleChangeTurn = () => {\r\n    dispatch( changeTurn('player') );      \r\n    dispatch( execIATurn() );\r\n  }\r\n\r\n  const handleNextRound = () => {\r\n    dispatch( changeTurn('ia') ); \r\n    dispatch( endRound() ); \r\n  }\r\n\r\n  const handlePickCard = () => {\r\n    dispatch( pickCard('player') );\r\n  }\r\n\r\n  const handleMouseOver = (e) => {\r\n    e.target.disabled ? e.target.classList.add('not-allowed') : e.target.classList.remove('not-allowed')\r\n  }\r\n\r\n  const handleNewGame = () => {\r\n\r\n    Swal.fire({\r\n      icon: 'question',\r\n      title: '¿Está seguro de iniciar una nueva partida?',\r\n      text: 'Se reiniciará el marcador y la baraja',\r\n      showConfirmButton: true,\r\n      confirmButtonText: 'Confirmar',\r\n      showCancelButton: true,\r\n      cancelButtonText: 'Cancelar'\r\n    }).then( ( {isConfirmed} ) => {\r\n      if ( isConfirmed ) {\r\n        dispatch( reset() );\r\n      }\r\n    });\r\n  }\r\n\r\n  return (\r\n    <div className=\"btn-group-vertical mt-3\">\r\n      <button \r\n        onClick={ handlePickCard } type=\"button\" className=\"btn btn-primary game-button\" \r\n        onMouseOver={ handleMouseOver }\r\n        disabled={ (playerwins !== null) || (deck.length <= 0) ? true : false  }\r\n      >\r\n        Tomar Carta\r\n      </button>\r\n      <button \r\n        onClick={ handleChangeTurn } type=\"button\" className=\"btn btn-success game-button\" \r\n        onMouseOver={ handleMouseOver }\r\n        disabled={ (playerwins !== null) || (deck.length <= 0) ? true : false  }\r\n      >\r\n        Pasar Turno\r\n      </button>\r\n      <button \r\n        onClick={ handleNextRound } type=\"button\" className=\"btn btn-warning game-button\" \r\n        onMouseOver={ handleMouseOver }\r\n        disabled={ (playerwins === null) || (deck.length <= 0) ? true : false }\r\n      >\r\n        Siguiente Ronda\r\n      </button>\r\n      <button onClick={ handleNewGame } type=\"button\" className=\"btn btn-secondary game-button\" onMouseOver={ handleMouseOver }>\r\n        Nueva Partida\r\n      </button>\r\n    </div>\r\n  );\r\n};\r\n\r\nexport default GameButtons;\r\n","import React from \"react\";\r\n\r\nconst Scoreboard = ({rounds:{ player_rounds, ia_rounds }}) => {\r\n\r\n  return (\r\n    <div>\r\n      <table className=\"scoreboard mt-2\">\r\n        <tbody>\r\n          <tr>\r\n            <td>{player_rounds}</td>\r\n            <td>{ia_rounds}</td>\r\n          </tr>\r\n        </tbody>\r\n        <tfoot>\r\n          <tr>\r\n            <th>Jugador</th>\r\n            <th>Adversario</th>\r\n          </tr>\r\n        </tfoot>\r\n      </table>\r\n    </div>\r\n  );\r\n};\r\n\r\nexport default Scoreboard;\r\n","import React, { useEffect } from 'react'\r\nimport { useDispatch, useSelector } from 'react-redux'\r\nimport { changeTurn, execIATurn } from '../actions/gameActions'\r\nimport Deck from './Deck'\r\nimport GameButtons from './GameButtons'\r\nimport Scoreboard from './Scoreboard'\r\n\r\nconst Aside = () => {\r\n\r\n  let { \r\n    deck,\r\n    turn,\r\n    score: { \r\n      player_wins,\r\n      rounds\r\n    } \r\n  } = useSelector(({game}) => game);\r\n\r\n  const dispatch = useDispatch();\r\n\r\n  useEffect(() => {\r\n    if ( turn === 'player' ) {\r\n      if ( deck.length <= 0 ) {\r\n        dispatch( changeTurn( 'player' ) );      \r\n        dispatch( execIATurn() );\r\n      }\r\n    }\r\n  }, [ deck.length ])\r\n\r\n    return (\r\n        <aside className=\"game-aside\" >\r\n            <Scoreboard rounds={ rounds }/>\r\n            <Deck deck={ deck } playerwins={ player_wins }/>\r\n            <GameButtons deck={ deck } playerwins={ player_wins }/>\r\n        </aside>\r\n    )\r\n}\r\n\r\nexport default Aside\r\n","import { faQuestionCircle } from '@fortawesome/free-solid-svg-icons'\r\nimport { FontAwesomeIcon } from '@fortawesome/react-fontawesome'\r\nimport React, { useEffect } from 'react'\r\nimport { useSelector } from 'react-redux';\r\nimport PropTypes from 'prop-types'\r\n\r\nconst PlayersTitles = ({name}) => {\r\n\r\n  const { points: {player_points, ia_points} } = useSelector(({game: { score }}) => score);\r\n\r\n\r\n    return (\r\n        <h3 className=\"fontEastwood\" style={{fontSize:'2.6rem'}}>\r\n            {name} - <span className=\"badge badge-dark\">{ name === \"Jugador\" ? player_points : ia_points }</span> <FontAwesomeIcon style={{fontSize:'1.3rem'}} icon={ faQuestionCircle }/>\r\n        </h3>\r\n    )\r\n}\r\n\r\nexport default PlayersTitles\r\n\r\nPlayersTitles.propTypes = {\r\n    name: PropTypes.oneOf(['Jugador', 'Adversario'])\r\n}\r\n\r\n","import React from \"react\";\r\nimport { useSelector } from \"react-redux\";\r\nimport Aside from \"../../components/Aside\";\r\nimport GameButtons from \"../../components/GameButtons\";\r\nimport PlayerCards from \"../../components/PlayerCards\";\r\nimport PlayersTitles from \"../../components/PlayersTitles\";\r\n\r\nconst GameScreen = () => {\r\n\r\n  let { \r\n    deck,\r\n    turn,\r\n    score: { \r\n      player_wins,\r\n      rounds\r\n    } \r\n  } = useSelector(({game}) => game);\r\n\r\n  return (\r\n    <div className=\"main__box\">\r\n      <div className=\"row no-gutters\" style={{ height: \"100%\" }}>\r\n        <div className=\"row col p-3\">\r\n          {/* <div className=\"col-md-12 d-flex justify-content-center mb-2\">\r\n            <GameButtons playerwins={ player_wins } deckcounter={ deck.length }/>\r\n          </div> */}\r\n          <div className=\"col-md-12 h-50\">\r\n            <PlayersTitles name=\"Jugador\"/>\r\n            <PlayerCards cardsProp={ 'player_cards' } />\r\n          </div>\r\n          <div className=\"col-md-12 h-50\">\r\n            <PlayersTitles name=\"Adversario\"/>\r\n            <PlayerCards cardsProp={ 'ia_cards' } />\r\n          </div>\r\n        </div>\r\n        <div className=\"col-md-auto\" style={{ height: \"100%\" }}>\r\n          <Aside />\r\n        </div>\r\n      </div>\r\n    </div>\r\n  );\r\n};\r\n\r\nexport default GameScreen;\r\n","import React from \"react\";\r\nimport {\r\n  BrowserRouter as Router,\r\n  Switch,\r\n  Route,\r\n  Link,\r\n  Redirect,\r\n} from \"react-router-dom\";\r\nimport HomeScreen from \"../pages/home/HomeScreen\";\r\nimport GameScreen from \"../pages/game/GameScreen\";\r\n\r\nconst AppRouter = () => {\r\n  return (\r\n    <Router>\r\n      <div className=\"main\">\r\n        <Switch>\r\n          <Route exact path=\"/\" component={HomeScreen} />\r\n          <Route exact path=\"/ingame\" component={GameScreen} />\r\n          <Redirect to='/' />,\r\n        </Switch>\r\n      </div>\r\n    </Router>\r\n  );\r\n};\r\n\r\nexport default AppRouter;\r\n","import { useState } from \"react\";\r\nimport { useDispatch } from \"react-redux\";\r\nimport Swal from 'sweetalert2';\r\n\r\nexport const getResults = ( playerPoints, iaPoints, turn, deckcounter ) => {\r\n\r\n    if ( turn === 'player' ) {\r\n        if (playerPoints > 21 ) {\r\n            Swal.fire({\r\n                icon: 'error',\r\n                title: '¡Perdiste esta ronda!',\r\n                text: 'Obtuviste más de 21 puntos'\r\n            }).then(() => {\r\n                if ( deckcounter <= 0 ) {\r\n                    showEndGameAlert();\r\n                }\r\n            })\r\n            return false;\r\n        }\r\n    \r\n        if ( playerPoints === 21 ) {\r\n            Swal.fire({\r\n                icon: 'success',\r\n                title: '¡Ganaste esta ronda!',\r\n                text: 'Obtuviste 21 puntos'\r\n            }).then(() => {\r\n                if ( deckcounter <= 0 ) {\r\n                    showEndGameAlert();\r\n                }\r\n            })\r\n            return true;\r\n        }\r\n    } else {\r\n        if ( iaPoints === 21 ) {\r\n            Swal.fire({\r\n                icon: 'error',\r\n                title: '¡Perdiste esta ronda!',\r\n                text: 'Tu adversario obtuvo 21 puntos'\r\n            }).then(() => {\r\n                if ( deckcounter <= 0 ) {\r\n                    showEndGameAlert();\r\n                }\r\n            })\r\n            return false;\r\n        }\r\n        else if (playerPoints > 21 ) {\r\n            Swal.fire({\r\n                icon: 'error',\r\n                title: '¡Perdiste esta ronda!',\r\n                text: 'Obtuviste más de 21 puntos'\r\n            }).then(() => {\r\n                if ( deckcounter <= 0 ) {\r\n                    showEndGameAlert();\r\n                }\r\n            })\r\n            return false;\r\n        }\r\n        else if ( iaPoints > 21 ) {\r\n            Swal.fire({\r\n                icon: 'success',\r\n                title: '¡Ganaste esta ronda!',\r\n                text: 'Tu adversario obtuvo más de 21 puntos'\r\n            }).then(() => {\r\n                if ( deckcounter <= 0 ) {\r\n                    showEndGameAlert();\r\n                }\r\n            })\r\n            return true;\r\n        }\r\n        else if ( playerPoints === iaPoints ) {\r\n            Swal.fire({\r\n                icon: 'warning',\r\n                title: '¡Empate!',\r\n                text: 'Ambos jugadores obtuvieron la misma cantidad de puntos'\r\n            }).then(() => {\r\n                if ( deckcounter <= 0 ) {\r\n                    showEndGameAlert();\r\n                }\r\n            });\r\n            return null;\r\n        }\r\n        else if ( playerPoints < iaPoints ) {\r\n            Swal.fire({\r\n                icon: 'error',\r\n                title: '¡Perdiste esta ronda!',\r\n                text: 'Tu adversario obtuvo más puntos'\r\n            }).then(() => {\r\n                if ( deckcounter <= 0 ) {\r\n                    showEndGameAlert();\r\n                }\r\n            })\r\n            return false;\r\n        }\r\n        else if ( playerPoints > iaPoints ) {\r\n            Swal.fire({\r\n                icon: 'success',\r\n                title: '¡Ganaste esta ronda!',\r\n                text: 'Obtuviste más puntos que tu adversario'\r\n            }).then(() => {\r\n                if ( deckcounter <= 0 ) {\r\n                    showEndGameAlert();\r\n                }\r\n            })\r\n            return true;\r\n        }\r\n    }\r\n\r\n    return null;\r\n}\r\n\r\nexport const showEndGameAlert = () => {\r\n    Swal.fire({\r\n        icon: 'info',\r\n        title: 'Fin del juego',\r\n        text: `Ya no hay cartas en la baraja.`\r\n    });\r\n}","export const getCardValue = ( cardName ) => {\r\n\r\n    let cardValue = Number();\r\n\r\n    if ( cardName.length === 2 ) {\r\n        const firstChart = cardName.substring(0,1);\r\n        switch (firstChart) {\r\n            case 'A':\r\n                cardValue = 11;\r\n                break;\r\n            case 'J':\r\n                cardValue = 10;\r\n                break;\r\n            case 'Q':\r\n                cardValue = 10;\r\n                break;\r\n            case 'K':\r\n                cardValue = 10;\r\n                break;\r\n            default:\r\n                cardValue = Number(cardName.substring(0,1));\r\n                break;\r\n        }\r\n    } else {\r\n        cardValue = Number(cardName.substring(0,2));\r\n    }\r\n    return cardValue;\r\n}","export const getRounds = ( results, rounds ) => {\r\n    let { ia_rounds, player_rounds } = rounds;\r\n    switch (results) {\r\n        case null:\r\n            return {\r\n                ia_rounds,\r\n                player_rounds\r\n            };\r\n        case true:\r\n            return {\r\n                ia_rounds,\r\n                player_rounds: player_rounds + 1\r\n            };\r\n        case false:\r\n            return {\r\n                ia_rounds: ia_rounds + 1,\r\n                player_rounds\r\n            };\r\n        default:\r\n            return rounds;\r\n    }\r\n}","export class Card {\r\n    constructor(name = \"\", value= Number()) {\r\n        this.name = name;\r\n        this.value = value;\r\n    }\r\n}","import { types } from \"../types/types\";\r\nimport _ from \"underscore\";\r\nimport { getResults, showEndGameAlert } from \"../helpers/getResults\";\r\nimport { getCardValue } from \"../helpers/getCardValue\";\r\nimport { getRounds } from \"../helpers/getRounds\";\r\nimport { Card } from \"../classes/Card\";\r\n\r\nconst createDeck = () => {\r\n  let deck = [];\r\n  const suits = [\"C\", \"D\", \"H\", \"S\"];\r\n  const letters = [\"A\", \"J\", \"Q\", \"K\"];\r\n  for (const suit of suits) {\r\n    for (const letter of letters) {\r\n      deck.push(letter + suit);\r\n    }\r\n    for (let i = 2; i <= 10; i++) {\r\n      deck.push(i + suit);\r\n    }\r\n  }\r\n\r\n  return deck;\r\n};\r\n\r\nconst initialState = {\r\n  deck: createDeck(),\r\n  player_cards: [],\r\n  ia_cards: [],\r\n  turn: \"player\",\r\n  score: {\r\n    points: {\r\n      player_points: 0,\r\n      ia_points: 0,\r\n    },\r\n    rounds: {\r\n      player_rounds: 0,\r\n      ia_rounds: 0,\r\n    },\r\n    player_wins: null,\r\n  },\r\n};\r\n\r\nexport const gameReducer = (state = initialState, action) => {\r\n  let cloneState = { ...state };\r\n  let {\r\n    deck,\r\n    turn,\r\n    player_cards,\r\n    score,\r\n    score: {\r\n      points,\r\n      points: {\r\n        player_points: player_points_state,\r\n        ia_points: ia_points_state,\r\n      },\r\n      rounds,\r\n    },\r\n  } = cloneState;\r\n\r\n  switch (action.type) {\r\n    case types.pickCard:\r\n      const cardName = String(deck.pop());\r\n      const cardValue = getCardValue(cardName);\r\n      const card = new Card(cardName, cardValue);\r\n      const player_points = player_points_state + cardValue;\r\n      const ia_points = ia_points_state;\r\n      const results = getResults(player_points, ia_points, turn, deck.length);\r\n\r\n      return {\r\n        ...state,\r\n        player_cards: [...player_cards, card],\r\n        deck: [...deck],\r\n        turn: action.turn,\r\n        score: {\r\n          ...score,\r\n          points: {\r\n            player_points,\r\n            ia_points,\r\n          },\r\n          rounds: getRounds(results, rounds),\r\n          player_wins: results,\r\n        },\r\n      };\r\n\r\n    case types.changeTurn:\r\n      return {\r\n        ...state,\r\n        turn: action.currentTurn === \"player\" ? \"ia\" : \"player\",\r\n      };\r\n\r\n    case types.execIATurn:\r\n      let iaPoints     = ia_points_state;\r\n      let playerPoints = player_points_state;\r\n      let ia_cards = [];\r\n      if (deck.length > 0) {\r\n        while (iaPoints <= playerPoints) {\r\n          if (deck.length <= 0) break;\r\n          const cardName = String(deck.pop());\r\n          const cardValue = getCardValue(cardName);\r\n          const card = new Card(cardName, cardValue);\r\n          ia_cards.push(card);\r\n          iaPoints += cardValue;\r\n        }\r\n      }\r\n      const iaTurnResults = getResults(\r\n        playerPoints,\r\n        iaPoints,\r\n        turn,\r\n        deck.length\r\n      );\r\n\r\n      return {\r\n        ...state,\r\n        ia_cards,\r\n        deck: [...deck],\r\n        score: {\r\n          ...score,\r\n          points: {\r\n            player_points: playerPoints,\r\n            ia_points: iaPoints,\r\n          },\r\n          rounds: getRounds(iaTurnResults, rounds),\r\n          player_wins: iaTurnResults,\r\n        },\r\n      };\r\n\r\n    case types.endRound:\r\n      return {\r\n        ...state,\r\n        ia_cards: [],\r\n        player_cards: [],\r\n        score: {\r\n          ...state.score,\r\n          points: {\r\n            ia_points: 0,\r\n            player_points: 0,\r\n          },\r\n          player_wins: null,\r\n        },\r\n      };\r\n\r\n    case types.reset:\r\n      return { ...initialState, deck: createDeck() };\r\n\r\n    default:\r\n      return state;\r\n  }\r\n};\r\n","import { applyMiddleware, combineReducers, compose } from 'redux';\r\nimport { createStore } from 'redux';\r\nimport { gameReducer } from './reducers/gameReducer';\r\nimport thunk from 'redux-thunk';\r\n\r\nconst composeEnhancers = (typeof window !== 'undefined' && window.__REDUX_DEVTOOLS_EXTENSION_COMPOSE__) || compose;\r\n\r\nconst reducers = combineReducers({\r\n    game: gameReducer\r\n});\r\n\r\nexport const store = createStore(\r\n    reducers,\r\n    composeEnhancers(\r\n        applyMiddleware(thunk)\r\n    )\r\n);","import React from 'react'\r\nimport AppRouter from './router/AppRouter';\r\nimport { store } from './store';\r\nimport { Provider } from 'react-redux';\r\n\r\nexport const App = () => {\r\n    return (\r\n        <Provider store={ store }>\r\n            <AppRouter />\r\n        </Provider>\r\n    )\r\n}\r\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport { App } from './App';\nimport './assets/styles/styles.scss';\nimport 'bootstrap';\n\n\nReactDOM.render(\n    <App />,\n  document.getElementById('root')\n);\n"],"sourceRoot":""}